/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.babylon.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Appointment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Appointment\",\"namespace\":\"com.babylon.avro\",\"fields\":[{\"name\":\"Type\",\"type\":\"string\"},{\"name\":\"Data\",\"type\":{\"type\":\"record\",\"name\":\"Data\",\"fields\":[{\"name\":\"AppointmentId\",\"type\":\"string\"},{\"name\":\"TimestampUtc\",\"type\":\"int\"},{\"name\":\"Discipline\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence Type;
  @Deprecated public com.babylon.avro.Data Data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Appointment() {}

  /**
   * All-args constructor.
   */
  public Appointment(java.lang.CharSequence Type, com.babylon.avro.Data Data) {
    this.Type = Type;
    this.Data = Data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Type;
    case 1: return Data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Type = (java.lang.CharSequence)value$; break;
    case 1: Data = (com.babylon.avro.Data)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Type' field.
   */
  public java.lang.CharSequence getType() {
    return Type;
  }

  /**
   * Sets the value of the 'Type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.Type = value;
  }

  /**
   * Gets the value of the 'Data' field.
   */
  public com.babylon.avro.Data getData() {
    return Data;
  }

  /**
   * Sets the value of the 'Data' field.
   * @param value the value to set.
   */
  public void setData(com.babylon.avro.Data value) {
    this.Data = value;
  }

  /** Creates a new Appointment RecordBuilder */
  public static com.babylon.avro.Appointment.Builder newBuilder() {
    return new com.babylon.avro.Appointment.Builder();
  }
  
  /** Creates a new Appointment RecordBuilder by copying an existing Builder */
  public static com.babylon.avro.Appointment.Builder newBuilder(com.babylon.avro.Appointment.Builder other) {
    return new com.babylon.avro.Appointment.Builder(other);
  }
  
  /** Creates a new Appointment RecordBuilder by copying an existing Appointment instance */
  public static com.babylon.avro.Appointment.Builder newBuilder(com.babylon.avro.Appointment other) {
    return new com.babylon.avro.Appointment.Builder(other);
  }
  
  /**
   * RecordBuilder for Appointment instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Appointment>
    implements org.apache.avro.data.RecordBuilder<Appointment> {

    private java.lang.CharSequence Type;
    private com.babylon.avro.Data Data;

    /** Creates a new Builder */
    private Builder() {
      super(com.babylon.avro.Appointment.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.babylon.avro.Appointment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Type)) {
        this.Type = data().deepCopy(fields()[0].schema(), other.Type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Data)) {
        this.Data = data().deepCopy(fields()[1].schema(), other.Data);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Appointment instance */
    private Builder(com.babylon.avro.Appointment other) {
            super(com.babylon.avro.Appointment.SCHEMA$);
      if (isValidValue(fields()[0], other.Type)) {
        this.Type = data().deepCopy(fields()[0].schema(), other.Type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Data)) {
        this.Data = data().deepCopy(fields()[1].schema(), other.Data);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'Type' field */
    public java.lang.CharSequence getType() {
      return Type;
    }
    
    /** Sets the value of the 'Type' field */
    public com.babylon.avro.Appointment.Builder setType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.Type = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'Type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'Type' field */
    public com.babylon.avro.Appointment.Builder clearType() {
      Type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'Data' field */
    public com.babylon.avro.Data getData() {
      return Data;
    }
    
    /** Sets the value of the 'Data' field */
    public com.babylon.avro.Appointment.Builder setData(com.babylon.avro.Data value) {
      validate(fields()[1], value);
      this.Data = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'Data' field has been set */
    public boolean hasData() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'Data' field */
    public com.babylon.avro.Appointment.Builder clearData() {
      Data = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Appointment build() {
      try {
        Appointment record = new Appointment();
        record.Type = fieldSetFlags()[0] ? this.Type : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Data = fieldSetFlags()[1] ? this.Data : (com.babylon.avro.Data) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}

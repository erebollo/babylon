/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.babylon.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Data extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Data\",\"namespace\":\"com.babylon.avro\",\"fields\":[{\"name\":\"AppointmentId\",\"type\":\"string\"},{\"name\":\"TimestampUtc\",\"type\":\"int\"},{\"name\":\"Discipline\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence AppointmentId;
  @Deprecated public int TimestampUtc;
  @Deprecated public java.util.List<java.lang.CharSequence> Discipline;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Data() {}

  /**
   * All-args constructor.
   */
  public Data(java.lang.CharSequence AppointmentId, java.lang.Integer TimestampUtc, java.util.List<java.lang.CharSequence> Discipline) {
    this.AppointmentId = AppointmentId;
    this.TimestampUtc = TimestampUtc;
    this.Discipline = Discipline;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return AppointmentId;
    case 1: return TimestampUtc;
    case 2: return Discipline;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: AppointmentId = (java.lang.CharSequence)value$; break;
    case 1: TimestampUtc = (java.lang.Integer)value$; break;
    case 2: Discipline = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'AppointmentId' field.
   */
  public java.lang.CharSequence getAppointmentId() {
    return AppointmentId;
  }

  /**
   * Sets the value of the 'AppointmentId' field.
   * @param value the value to set.
   */
  public void setAppointmentId(java.lang.CharSequence value) {
    this.AppointmentId = value;
  }

  /**
   * Gets the value of the 'TimestampUtc' field.
   */
  public java.lang.Integer getTimestampUtc() {
    return TimestampUtc;
  }

  /**
   * Sets the value of the 'TimestampUtc' field.
   * @param value the value to set.
   */
  public void setTimestampUtc(java.lang.Integer value) {
    this.TimestampUtc = value;
  }

  /**
   * Gets the value of the 'Discipline' field.
   */
  public java.util.List<java.lang.CharSequence> getDiscipline() {
    return Discipline;
  }

  /**
   * Sets the value of the 'Discipline' field.
   * @param value the value to set.
   */
  public void setDiscipline(java.util.List<java.lang.CharSequence> value) {
    this.Discipline = value;
  }

  /** Creates a new Data RecordBuilder */
  public static com.babylon.avro.Data.Builder newBuilder() {
    return new com.babylon.avro.Data.Builder();
  }
  
  /** Creates a new Data RecordBuilder by copying an existing Builder */
  public static com.babylon.avro.Data.Builder newBuilder(com.babylon.avro.Data.Builder other) {
    return new com.babylon.avro.Data.Builder(other);
  }
  
  /** Creates a new Data RecordBuilder by copying an existing Data instance */
  public static com.babylon.avro.Data.Builder newBuilder(com.babylon.avro.Data other) {
    return new com.babylon.avro.Data.Builder(other);
  }
  
  /**
   * RecordBuilder for Data instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Data>
    implements org.apache.avro.data.RecordBuilder<Data> {

    private java.lang.CharSequence AppointmentId;
    private int TimestampUtc;
    private java.util.List<java.lang.CharSequence> Discipline;

    /** Creates a new Builder */
    private Builder() {
      super(com.babylon.avro.Data.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.babylon.avro.Data.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.AppointmentId)) {
        this.AppointmentId = data().deepCopy(fields()[0].schema(), other.AppointmentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.TimestampUtc)) {
        this.TimestampUtc = data().deepCopy(fields()[1].schema(), other.TimestampUtc);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Discipline)) {
        this.Discipline = data().deepCopy(fields()[2].schema(), other.Discipline);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Data instance */
    private Builder(com.babylon.avro.Data other) {
            super(com.babylon.avro.Data.SCHEMA$);
      if (isValidValue(fields()[0], other.AppointmentId)) {
        this.AppointmentId = data().deepCopy(fields()[0].schema(), other.AppointmentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.TimestampUtc)) {
        this.TimestampUtc = data().deepCopy(fields()[1].schema(), other.TimestampUtc);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Discipline)) {
        this.Discipline = data().deepCopy(fields()[2].schema(), other.Discipline);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'AppointmentId' field */
    public java.lang.CharSequence getAppointmentId() {
      return AppointmentId;
    }
    
    /** Sets the value of the 'AppointmentId' field */
    public com.babylon.avro.Data.Builder setAppointmentId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.AppointmentId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'AppointmentId' field has been set */
    public boolean hasAppointmentId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'AppointmentId' field */
    public com.babylon.avro.Data.Builder clearAppointmentId() {
      AppointmentId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'TimestampUtc' field */
    public java.lang.Integer getTimestampUtc() {
      return TimestampUtc;
    }
    
    /** Sets the value of the 'TimestampUtc' field */
    public com.babylon.avro.Data.Builder setTimestampUtc(int value) {
      validate(fields()[1], value);
      this.TimestampUtc = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'TimestampUtc' field has been set */
    public boolean hasTimestampUtc() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'TimestampUtc' field */
    public com.babylon.avro.Data.Builder clearTimestampUtc() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'Discipline' field */
    public java.util.List<java.lang.CharSequence> getDiscipline() {
      return Discipline;
    }
    
    /** Sets the value of the 'Discipline' field */
    public com.babylon.avro.Data.Builder setDiscipline(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.Discipline = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'Discipline' field has been set */
    public boolean hasDiscipline() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'Discipline' field */
    public com.babylon.avro.Data.Builder clearDiscipline() {
      Discipline = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Data build() {
      try {
        Data record = new Data();
        record.AppointmentId = fieldSetFlags()[0] ? this.AppointmentId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.TimestampUtc = fieldSetFlags()[1] ? this.TimestampUtc : (java.lang.Integer) defaultValue(fields()[1]);
        record.Discipline = fieldSetFlags()[2] ? this.Discipline : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
